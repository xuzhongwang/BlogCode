<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(TargetDir)T4TemplateDemo.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="T4TemplateDemo" #>
<#@ output extension=".cs" #>

<#
string filePath = @"E:\localspace\codelibrary\CADTest\CADLib.Models\Data\Template.mdb";
IDataBaseEx dataBaseEx = new AccessDBEx(filePath);
var tables = dataBaseEx.GetTables();
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;
using System.Data.Entity.ModelConfiguration.Conventions;

	public class TemplateEntities:DbContext
	{
		public TemplateEntities()
            : base(SingleConnection.GetConnection(),false)
        {
        }

        public AccessContext(string filePath)
    :       base(SingleConnection.GetConnection(filePath), false)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
        }
		<# 
		foreach (var item in tables)
		{
		var tableName = item.TableName;
#>
		
		public virtual DbSet<<#= tableName#>> <#= tableName #> { get; set; }
		<# } #>
	 }
<#
foreach (var item in tables)
{
    var columas = dataBaseEx.GetFields(item); #>

	public class <#= item.TableName#>
	{
	<# foreach (var column in columas)
    {
        var fieldName = column.FieldName;
        var type = column.FieldType; #>

		public <#= type#> <#= fieldName #> {get;set;}
		<#
    }#>
		
	}
<#
}            
#>
